import { TFile } from 'obsidian';

// Type definitions for the Project Manager plugin

// Type alias for parameter values
export type ParameterValue = string | number | boolean;

export interface ProjectManagerSettings {
	projectsFolder: string;
	templatesFolder: string;
	dailyNotesFolder: string;
	autoGenerateDailyPlanner: boolean;
	defaultProjectTemplate: string;
	enableAutomation: boolean;
	dateFormat: string;
	showNotifications: boolean;
	enableGanttView: boolean;
	enableKanbanView: boolean;
	enableDashboard: boolean;
	maxRecentProjects: number;
	taskPriorityLevels: string[];
	projectStatuses: string[];
	taskStatuses: string[];
	// Legacy settings for backward compatibility
	defaultProjectPath: string;
	defaultTemplatePath: string;
	kanbanViewEnabled: boolean;
	ganttViewEnabled: boolean;
	timelineViewEnabled: boolean;
	autoGenerateReports: boolean;
	reportInterval: number; // in days
	taskPriorityColors: {
		high: string;
		medium: string;
		low: string;
	};
	workingDays: number[];
	workingHours: {
		start: string;
		end: string;
	};
}

export const DEFAULT_SETTINGS: ProjectManagerSettings = {
	projectsFolder: 'Projects',
	templatesFolder: 'Templates/Projects',
	dailyNotesFolder: 'Daily Notes',
	autoGenerateDailyPlanner: false,
	defaultProjectTemplate: 'Basic Project',
	enableAutomation: true,
	dateFormat: 'YYYY-MM-DD',
	showNotifications: true,
	enableGanttView: true,
	enableKanbanView: true,
	enableDashboard: true,
	maxRecentProjects: 10,
	taskPriorityLevels: ['Low', 'Medium', 'High', 'Critical'],
	projectStatuses: ['Planning', 'Active', 'On Hold', 'Completed', 'Cancelled'],
	taskStatuses: ['To Do', 'In Progress', 'Review', 'Done', 'Blocked'],
	// Legacy settings
	defaultProjectPath: '01-Projects',
	defaultTemplatePath: '05-Templates',
	kanbanViewEnabled: true,
	ganttViewEnabled: true,
	timelineViewEnabled: true,
	autoGenerateReports: false,
	reportInterval: 7,
	taskPriorityColors: {
		high: '#ff6b6b',
		medium: '#ffd93d',
		low: '#6bcf7f'
	},
	workingDays: [1, 2, 3, 4, 5], // Monday to Friday
	workingHours: {
		start: '09:00',
		end: '17:00'
	}
};

export interface ProjectMetadata {
	title: string;
	type: ProjectType;
	status: ProjectStatus;
	priority: Priority;
	created: string;
	updated: string;
	dueDate?: string;
	startDate?: string;
	completionDate?: string;
	assignee?: string;
	stakeholders: string[];
	tags: string[];
	description: string;
	progress: number; // 0-100
	budget?: number;
	estimatedHours?: number;
	actualHours?: number;
	dependencies: string[];
	risks: Risk[];
	milestones: Milestone[];
}

export interface TaskMetadata {
	id: string;
	title: string;
	description?: string;
	status: TaskStatus;
	priority: Priority;
	assignee?: string;
	created: string;
	updated: string;
	dueDate?: string;
	startDate?: string;
	completionDate?: string;
	estimatedHours?: number;
	actualHours?: number;
	parentProject: string;
	dependencies: string[];
	tags: string[];
	progress: number; // 0-100
	subtasks: string[];
	comments: Comment[];
}

export interface Milestone {
	id: string;
	title: string;
	description?: string;
	dueDate: string;
	status: MilestoneStatus;
	dependencies: string[];
	deliverables: string[];
	projectId?: string;
}

export interface Risk {
	id: string;
	title: string;
	description: string;
	impact: RiskImpact;
	probability: RiskProbability;
	mitigation: string;
	status: RiskStatus;
	owner?: string;
	projectId?: string;
}

export interface Stakeholder {
	id: string;
	name: string;
	email: string;
	role: string;
	influence: RiskImpact; // Reusing enum for consistency
	interest: RiskImpact; // Reusing enum for consistency
	projectId?: string;
}

export interface Comment {
	id: string;
	author: string;
	content: string;
	timestamp: string;
	replies?: Comment[];
}

export interface GanttData {
	tasks: GanttTask[];
	dependencies: GanttDependency[];
	milestones: GanttMilestone[];
}

export interface GanttTask {
	id: string;
	name: string;
	start: string;
	end: string;
	progress: number;
	dependencies: string[];
	resource?: string;
	color?: string;
}

export interface GanttDependency {
	from: string;
	to: string;
	type: DependencyType;
}

export interface GanttMilestone {
	id: string;
	name: string;
	date: string;
}

export interface KanbanColumn {
	id: string;
	title: string;
	tasks: KanbanTask[];
	maxItems?: number;
}

export interface KanbanTask {
	id: string;
	title: string;
	description?: string;
	priority: Priority;
	assignee?: string;
	dueDate?: string;
	tags: string[];
	estimatedHours?: number;
}

export interface WorkflowTemplate {
	id: string;
	name: string;
	description: string;
	type: ProjectType;
	phases: WorkflowPhase[];
	defaultTasks: TemplateTask[];
	metadata: TemplateMetadata;
}

export interface WorkflowPhase {
	id: string;
	name: string;
	description: string;
	estimatedDuration: number; // in days
	dependencies: string[];
	tasks: string[];
}

export interface TemplateTask {
	id: string;
	title: string;
	description?: string;
	phase: string;
	estimatedHours?: number;
	dependencies: string[];
	assigneeRole?: string;
}

export interface TemplateMetadata {
	created: string;
	updated: string;
	author: string;
	version: string;
	tags: string[];
}

export interface TimelineEvent {
	id: string;
	title: string;
	description?: string;
	date: string;
	type: TimelineEventType;
	projectId?: string;
	taskId?: string;
	milestone?: boolean;
}

export interface ProjectReport {
	id: string;
	projectId: string;
	generated: string;
	period: ReportPeriod;
	summary: ReportSummary;
	tasks: TaskReport[];
	milestones: MilestoneReport[];
	risks: RiskReport[];
	recommendations: string[];
}

export interface ReportSummary {
	totalTasks: number;
	completedTasks: number;
	overdueTasks: number;
	progress: number;
	budgetUsed?: number;
	hoursSpent?: number;
	estimatedCompletion?: string;
}

export interface TaskReport {
	taskId: string;
	title: string;
	status: TaskStatus;
	progress: number;
	daysOverdue?: number;
	assignee?: string;
}

export interface MilestoneReport {
	milestoneId: string;
	title: string;
	status: MilestoneStatus;
	dueDate: string;
	daysUntilDue?: number;
	completion: number;
}

export interface RiskReport {
	riskId: string;
	title: string;
	impact: RiskImpact;
	probability: RiskProbability;
	status: RiskStatus;
	mitigation: string;
}

// Primary interfaces for the Project Manager
export interface Task {
	id: string;
	title: string;
	description?: string;
	status: TaskStatus;
	priority: Priority;
	assignee?: string;
	created: string;
	updated: string;
	dueDate?: string;
	startDate?: string;
	completionDate?: string;
	estimatedHours?: number;
	actualHours?: number;
	parentProject: string;
	dependencies: string[];
	tags: string[];
	progress: number; // 0-100
	subtasks: string[];
	comments: Comment[];
	file?: TFile;
}

export interface Project {
	id: string;
	name: string;
	description?: string;
	status: ProjectStatus;
	priority: Priority;
	startDate: string;
	endDate?: string;
	progress: number;
	tags: string[];
	assignees: string[];
	budget?: number;
	actualCost?: number;
	file: TFile;
	tasks: Task[];
	dependencies: string[];
	milestones: Milestone[];
	risks: Risk[];
	stakeholders: Stakeholder[];
	created: string;
	updated: string;
}

// Enums
export enum ProjectType {
	DEVELOPMENT = 'development',
	DOCUMENTATION = 'documentation',
	RESEARCH = 'research',
	IMPLEMENTATION = 'implementation',
	CONSULTING = 'consulting',
	DESIGN = 'design',
	ANALYSIS = 'analysis',
	MAINTENANCE = 'maintenance',
	OTHER = 'other'
}

export enum ProjectStatus {
	PLANNING = 'planning',
	ACTIVE = 'active',
	ON_HOLD = 'on-hold',
	COMPLETED = 'completed',
	CANCELLED = 'cancelled',
	ARCHIVED = 'archived'
}

export enum TaskStatus {
	TODO = 'todo',
	IN_PROGRESS = 'in-progress',
	REVIEW = 'review',
	TESTING = 'testing',
	BLOCKED = 'blocked',
	DONE = 'done',
	CANCELLED = 'cancelled'
}

export enum Priority {
	LOW = 'low',
	MEDIUM = 'medium',
	HIGH = 'high',
	CRITICAL = 'critical'
}

export enum MilestoneStatus {
	UPCOMING = 'upcoming',
	IN_PROGRESS = 'in-progress',
	COMPLETED = 'completed',
	OVERDUE = 'overdue'
}

export enum RiskImpact {
	LOW = 'low',
	MEDIUM = 'medium',
	HIGH = 'high',
	CRITICAL = 'critical'
}

export enum RiskProbability {
	LOW = 'low',
	MEDIUM = 'medium',
	HIGH = 'high'
}

export enum RiskStatus {
	IDENTIFIED = 'identified',
	ANALYZING = 'analyzing',
	MITIGATING = 'mitigating',
	RESOLVED = 'resolved',
	ACCEPTED = 'accepted'
}

export enum DependencyType {
	FINISH_TO_START = 'fs',
	START_TO_START = 'ss',
	FINISH_TO_FINISH = 'ff',
	START_TO_FINISH = 'sf'
}

export enum TimelineEventType {
	TASK_CREATED = 'task-created',
	TASK_COMPLETED = 'task-completed',
	TASK_UPDATED = 'task-updated',
	MILESTONE_REACHED = 'milestone-reached',
	PROJECT_STARTED = 'project-started',
	PROJECT_COMPLETED = 'project-completed',
	RISK_IDENTIFIED = 'risk-identified',
	COMMENT_ADDED = 'comment-added'
}

export enum ReportPeriod {
	DAILY = 'daily',
	WEEKLY = 'weekly',
	MONTHLY = 'monthly',
	QUARTERLY = 'quarterly',
	CUSTOM = 'custom'
}
